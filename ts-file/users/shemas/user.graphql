type User {
  id: ID!
  firstName: String
  lastName: String
  middleName: String
  password: String!
  email: String!
}
type Delete {
  acknowledged: Boolean
  deletedCount: Int!
}
type Type {
  type: 'band' | 'genre' | 'artist' | 'track'
}

type IncrementUserViewsResponse {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
  "Newly updated track after a successful mutation"
  user: User
}
type JWT {
  JWT: String!
}

type Query {
  "Fetch a specific user, provided a user's ID"
  user(id: ID!): IncrementUserViewsResponse!
  "Fetch a specific Jwt, provided a user's password and email"
  jwt(password: String!, email: String!): JWT
}

type Mutation {
  register(
    firstName: String
    lastName: String
    password: String!
    email: String!
  ): IncrementUserViewsResponse!
}
